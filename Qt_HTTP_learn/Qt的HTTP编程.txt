5.QT的HTTP编程
QNetworkAccessManager 、QNetworkRequest 、QNetworkReply 管理http连接步骤：
(1)创建一个QNetworkAccessManager对象，并使用它发送处理HTTP请求。
QNetworkRequest封装网络请求的详细信息
调用 manager 的 get() 方法发起 HTTP GET 请求
返回一个 QNetworkReply 对象指针（存储在 reply 变量中），用于跟踪请求状态和处理响应数据

QNetworkAccessManager对象会异步地处理请求，并返回一个QNetworkReply对象。
 	QNetworkAccessManager manager;
 	QNetworkRequest request(QUrl("http://example.com"));
 	QNetworkReply *reply = manager.get(request);
 	QObject::connect(reply, &QNetworkReply::finished, [&]() {
	 if (reply->error()) {
 	qDebug() << "Error:" << reply->errorString();
 	return;
 	}
 	});
	 QString response = reply->readAll();
 	qDebug() << "Response:" << response;
 	return a.exec();、
	}
在这个例子中，我们使用QNetworkAccessManager 的get方法发送了HTTP GET请求到"http://example.com"。
然后，我们连接了QNetworkReply对象的finished信号到一个lambda函数，该函数在收到HTTP响应时被调用。
注意：
1.异步处理: 
QNetworkAccessManager 的请求是异步的。这意味着get方法会立即返回，而HTTP响应将在稍后通过信号处理。
2. 错误处理:
 应该检查QnetworkReply对象是否有错误，并相应地处理。
3. 内存管理: 
QNetworkReply 对象需要被正确地管理，以避免内存泄漏。通常情况下，使用
QObject::deleteLater 来安排删除它是一个好方法。