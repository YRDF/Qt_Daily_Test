创建一个新的任务类，继承自QObject
在这个类种添加一个公共的成员函数，函数体就是要在子线程执行的业务

在主线程创建一个QThread对象，这就是子线程的对象
主线程创建任务类的对象
任务类对象由于继承自QObjcet，所以可以调用moveToThread()函数，把自己移动到子线程对象中去。
该方法可以指定任务类移动到哪个子线程，因此比较灵活。

子线程调用start()，这时候线程启动了
但是子线程启动时里面并没有工作
调用该任务对象里面的任务函数，让这个函数开始执行，就可以是在启动的线程中工作了。
// 危险操作！（主线程调用）
worker->processData(data); 

// 本质是：主线程直接访问子线程对象的函数
// 可能引发：
//   1. 资源竞争（如同时访问文件/网络）
//   2. 非线程安全的 Qt 操作（如修改 GUI）
//   3. 数据不同步（缓存未刷新）

因此不推荐这种方法，最好还是使用信号和槽的方法，这是 Qt 多线程编程的核心安全准则。